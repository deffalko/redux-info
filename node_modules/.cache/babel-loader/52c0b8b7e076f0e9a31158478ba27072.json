{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  search: \"\",\n  region: \"\",\n  type: \"all\",\n  filterStatus: \"\",\n  // или по умолчанию \"all\" или \"\" для фильтрации по статусу\n  remove: \"\"\n};\nconst controlSlice = createSlice({\n  name: \"@@controls\",\n  initialState,\n  reducers: {\n    setSearch: (state, action) => {\n      state.search = action.payload;\n    },\n    setRegion: (state, action) => {\n      state.region = action.payload;\n    },\n    setType: (state, action) => {\n      state.type = action.payload;\n    },\n    setRemove: (state, action) => {\n      state.type = action.payload;\n    },\n    setFilterStatus: (state, action) => {\n      state.filterStatus = action.payload;\n    },\n    clearControls: () => initialState\n  }\n});\nexport const {\n  setRegion,\n  setSearch,\n  setType,\n  setFilterStatus,\n  clearControls\n} = controlSlice.actions;\nexport const controlsReducer = controlSlice.reducer;\nexport const selectSearch = state => state.controls.search;\nexport const selectType = state => state.controls.type;\nexport const selectRegion = state => state.controls.region;\nexport const selectFilterStatus = state => state.controls.filterStatus;\nexport const selectControls = state => state.controls;","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-info/src/features/controls/controls-slice.js"],"names":["createSlice","initialState","search","region","type","filterStatus","remove","controlSlice","name","reducers","setSearch","state","action","payload","setRegion","setType","setRemove","setFilterStatus","clearControls","actions","controlsReducer","reducer","selectSearch","controls","selectType","selectRegion","selectFilterStatus","selectControls"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,IAAI,EAAE,KAHa;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAID;AAClBC,EAAAA,MAAM,EAAE;AALW,CAArB;AAQA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,YADyB;AAE/BP,EAAAA,YAF+B;AAG/BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACT,MAAN,GAAeU,MAAM,CAACC,OAAtB;AACD,KAHO;AAIRC,IAAAA,SAAS,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACR,MAAN,GAAeS,MAAM,CAACC,OAAtB;AACD,KANO;AAORE,IAAAA,OAAO,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACD,KATO;AAURG,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACD,KAZO;AAaRI,IAAAA,eAAe,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAACC,OAA5B;AACD,KAfO;AAgBRK,IAAAA,aAAa,EAAE,MAAMjB;AAhBb;AAHqB,CAAD,CAAhC;AAuBA,OAAO,MAAM;AAAEa,EAAAA,SAAF;AAAaJ,EAAAA,SAAb;AAAwBK,EAAAA,OAAxB;AAAiCE,EAAAA,eAAjC;AAAkDC,EAAAA;AAAlD,IACXX,YAAY,CAACY,OADR;AAEP,OAAO,MAAMC,eAAe,GAAGb,YAAY,CAACc,OAArC;AAEP,OAAO,MAAMC,YAAY,GAAIX,KAAD,IAAWA,KAAK,CAACY,QAAN,CAAerB,MAA/C;AACP,OAAO,MAAMsB,UAAU,GAAIb,KAAD,IAAWA,KAAK,CAACY,QAAN,CAAenB,IAA7C;AACP,OAAO,MAAMqB,YAAY,GAAId,KAAD,IAAWA,KAAK,CAACY,QAAN,CAAepB,MAA/C;AACP,OAAO,MAAMuB,kBAAkB,GAAIf,KAAD,IAAWA,KAAK,CAACY,QAAN,CAAelB,YAArD;AACP,OAAO,MAAMsB,cAAc,GAAIhB,KAAD,IAAWA,KAAK,CAACY,QAAxC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  search: \"\",\r\n  region: \"\",\r\n  type: \"all\",\r\n  filterStatus: \"\", // или по умолчанию \"all\" или \"\" для фильтрации по статусу\r\n  remove: \"\",\r\n};\r\n\r\nconst controlSlice = createSlice({\r\n  name: \"@@controls\",\r\n  initialState,\r\n  reducers: {\r\n    setSearch: (state, action) => {\r\n      state.search = action.payload;\r\n    },\r\n    setRegion: (state, action) => {\r\n      state.region = action.payload;\r\n    },\r\n    setType: (state, action) => {\r\n      state.type = action.payload;\r\n    },\r\n    setRemove: (state, action) => {\r\n      state.type = action.payload;\r\n    },\r\n    setFilterStatus: (state, action) => {\r\n      state.filterStatus = action.payload;\r\n    },\r\n    clearControls: () => initialState,\r\n  },\r\n});\r\n\r\nexport const { setRegion, setSearch, setType, setFilterStatus, clearControls } =\r\n  controlSlice.actions;\r\nexport const controlsReducer = controlSlice.reducer;\r\n\r\nexport const selectSearch = (state) => state.controls.search;\r\nexport const selectType = (state) => state.controls.type;\r\nexport const selectRegion = (state) => state.controls.region;\r\nexport const selectFilterStatus = (state) => state.controls.filterStatus;\r\nexport const selectControls = (state) => state.controls;\r\n"]},"metadata":{},"sourceType":"module"}