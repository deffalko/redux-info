{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"; // export const loadCountries = createAsyncThunk(\n//   \"@@countries/load-countries\",\n//   (_, { extra: { client, api } }) => {\n//     return client.get(api.ALL_COUNTRIES);\n//   }\n// );\n\nexport const loadCountries = createAsyncThunk(\"@@countries/load-countries\", (_, _ref) => {\n  let {\n    extra: {\n      client,\n      api\n    }\n  } = _ref;\n  return client.get(api.ALL_COUNTRIES);\n});\nconst initialState = {\n  status: \"idle\",\n  error: null,\n  list: []\n};\nconst countrySlice = createSlice({\n  name: \"@@countries\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadCountries.pending, state => {\n      state.status = \"loading\";\n      state.error = null;\n    }).addCase(loadCountries.rejected, (state, action) => {\n      state.status = \"rejected\";\n      state.error = action.payload || action.meta.error;\n    }).addCase(loadCountries.fulfilled, (state, action) => {\n      state.status = \"received\";\n      state.list = action.payload.data;\n    });\n  }\n});\nexport const countryReducer = countrySlice.reducer;\nexport const selectCountriesInfo = state => ({\n  status: state.countries.status,\n  error: state.countries.error,\n  qty: state.countries.list.length\n});\nexport const selectAllCountries = state => state.countries.list;\nexport const selectVisibleCountries = (state, _ref2) => {\n  let {\n    search = \"\",\n    region = \"\"\n  } = _ref2;\n  return state.countries.list.filter(country => country.name.toLowerCase().includes(search.toLowerCase()) && country.region.includes(region));\n};","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-info/src/features/countries/countries-slice.js"],"names":["createAsyncThunk","createSlice","loadCountries","_","extra","client","api","get","ALL_COUNTRIES","initialState","status","error","list","countrySlice","name","reducers","extraReducers","builder","addCase","pending","state","rejected","action","payload","meta","fulfilled","data","countryReducer","reducer","selectCountriesInfo","countries","qty","length","selectAllCountries","selectVisibleCountries","search","region","filter","country","toLowerCase","includes"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,4BAD2C,EAE3C,CAACG,CAAD,WAAmC;AAAA,MAA/B;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV;AAAT,GAA+B;AACjC,SAAOD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACE,aAAf,CAAP;AACD,CAJ0C,CAAtC;AAOP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;AAMA,MAAMC,YAAY,GAAGZ,WAAW,CAAC;AAC/Ba,EAAAA,IAAI,EAAE,aADyB;AAE/BL,EAAAA,YAF+B;AAG/BM,EAAAA,QAAQ,EAAE,EAHqB;AAI/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWhB,aAAa,CAACiB,OADzB,EACmCC,KAAD,IAAW;AACzCA,MAAAA,KAAK,CAACV,MAAN,GAAe,SAAf;AACAU,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACD,KAJH,EAKGO,OALH,CAKWhB,aAAa,CAACmB,QALzB,EAKmC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAClDF,MAAAA,KAAK,CAACV,MAAN,GAAe,UAAf;AACAU,MAAAA,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACE,IAAP,CAAYb,KAA5C;AACD,KARH,EASGO,OATH,CASWhB,aAAa,CAACuB,SATzB,EASoC,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACnDF,MAAAA,KAAK,CAACV,MAAN,GAAe,UAAf;AACAU,MAAAA,KAAK,CAACR,IAAN,GAAaU,MAAM,CAACC,OAAP,CAAeG,IAA5B;AACD,KAZH;AAaD;AAlB8B,CAAD,CAAhC;AAqBA,OAAO,MAAMC,cAAc,GAAGd,YAAY,CAACe,OAApC;AAEP,OAAO,MAAMC,mBAAmB,GAAIT,KAAD,KAAY;AAC7CV,EAAAA,MAAM,EAAEU,KAAK,CAACU,SAAN,CAAgBpB,MADqB;AAE7CC,EAAAA,KAAK,EAAES,KAAK,CAACU,SAAN,CAAgBnB,KAFsB;AAG7CoB,EAAAA,GAAG,EAAEX,KAAK,CAACU,SAAN,CAAgBlB,IAAhB,CAAqBoB;AAHmB,CAAZ,CAA5B;AAMP,OAAO,MAAMC,kBAAkB,GAAIb,KAAD,IAAWA,KAAK,CAACU,SAAN,CAAgBlB,IAAtD;AACP,OAAO,MAAMsB,sBAAsB,GAAG,CAACd,KAAD,YAAyC;AAAA,MAAjC;AAAEe,IAAAA,MAAM,GAAG,EAAX;AAAeC,IAAAA,MAAM,GAAG;AAAxB,GAAiC;AAC7E,SAAOhB,KAAK,CAACU,SAAN,CAAgBlB,IAAhB,CAAqByB,MAArB,CACJC,OAAD,IACEA,OAAO,CAACxB,IAAR,CAAayB,WAAb,GAA2BC,QAA3B,CAAoCL,MAAM,CAACI,WAAP,EAApC,KACAD,OAAO,CAACF,MAAR,CAAeI,QAAf,CAAwBJ,MAAxB,CAHG,CAAP;AAKD,CANM","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// export const loadCountries = createAsyncThunk(\r\n//   \"@@countries/load-countries\",\r\n//   (_, { extra: { client, api } }) => {\r\n//     return client.get(api.ALL_COUNTRIES);\r\n//   }\r\n// );\r\n\r\nexport const loadCountries = createAsyncThunk(\r\n  \"@@countries/load-countries\",\r\n  (_, { extra: { client, api } }) => {\r\n    return client.get(api.ALL_COUNTRIES);\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  error: null,\r\n  list: [],\r\n};\r\n\r\nconst countrySlice = createSlice({\r\n  name: \"@@countries\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadCountries.pending, (state) => {\r\n        state.status = \"loading\";\r\n        state.error = null;\r\n      })\r\n      .addCase(loadCountries.rejected, (state, action) => {\r\n        state.status = \"rejected\";\r\n        state.error = action.payload || action.meta.error;\r\n      })\r\n      .addCase(loadCountries.fulfilled, (state, action) => {\r\n        state.status = \"received\";\r\n        state.list = action.payload.data;\r\n      });\r\n  },\r\n});\r\n\r\nexport const countryReducer = countrySlice.reducer;\r\n\r\nexport const selectCountriesInfo = (state) => ({\r\n  status: state.countries.status,\r\n  error: state.countries.error,\r\n  qty: state.countries.list.length,\r\n});\r\n\r\nexport const selectAllCountries = (state) => state.countries.list;\r\nexport const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\r\n  return state.countries.list.filter(\r\n    (country) =>\r\n      country.name.toLowerCase().includes(search.toLowerCase()) &&\r\n      country.region.includes(region)\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}