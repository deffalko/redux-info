{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // Предположим, у вас есть массив данных, который нужно управлять\n// В реальности вы можете загрузить это с сервера или импортировать из файла\n// Для примера возьмем массив данных (можно заменить на вашу структуру)\n// const initialState = {\n//   items: [\n//     // Здесь вы можете инициализировать состояние на основе данных\n//     // например, так:\n//     { id: 1, name: \"DevLens\", isActive: true },\n//     { id: 2, name: \"StyleSpy\", isActive: true },\n//     { id: 3, name: \"SpeedBoost\", isActive: false },\n//     { id: 4, name: \"JSONWizard\", isActive: true },\n//     { id: 5, name: \"TabMaster Pro\", isActive: true },\n//     { id: 6, name: \"ViewportBuddy\", isActive: false },\n//     { id: 7, name: \"Markup Notes\", isActive: true },\n//     { id: 8, name: \"GridGuides\", isActive: false },\n//     { id: 9, name: \"Palette Picker\", isActive: true },\n//     { id: 10, name: \"LinkChecker\", isActive: true },\n//     { id: 11, name: \"DOM Snapshot\", isActive: false },\n//     { id: 12, name: \"ConsolePlus\", isActive: true },\n//     // добавьте остальные элементы из data.json\n//   ],\n// };\n\nconst initialState = {\n  isActive: \"\"\n};\nconst toggleSlice = createSlice({\n  name: \"@@toggle\",\n  initialState,\n  reducers: {\n    toggleItem: (state, action) => {\n      const itemId = action.payload;\n      const item = state.items.find(it => it.id === itemId);\n\n      if (item) {\n        item.isActive = !item.isActive;\n      }\n    }\n  }\n});\nexport const {\n  toggleItem\n} = toggleSlice.actions;\nexport const toggleReducer = toggleSlice.reducer;","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-info/src/features/toggle/toggle-slice.js"],"names":["createSlice","initialState","isActive","toggleSlice","name","reducers","toggleItem","state","action","itemId","payload","item","items","find","it","id","actions","toggleReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;AAIA,MAAMC,WAAW,GAAGH,WAAW,CAAC;AAC9BI,EAAAA,IAAI,EAAE,UADwB;AAE9BH,EAAAA,YAF8B;AAG9BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMC,MAAM,GAAGD,MAAM,CAACE,OAAtB;AACA,YAAMC,IAAI,GAAGJ,KAAK,CAACK,KAAN,CAAYC,IAAZ,CAAkBC,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUN,MAAnC,CAAb;;AACA,UAAIE,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACT,QAAL,GAAgB,CAACS,IAAI,CAACT,QAAtB;AACD;AACF;AAPO;AAHoB,CAAD,CAA/B;AAcA,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAiBH,WAAW,CAACa,OAAnC;AACP,OAAO,MAAMC,aAAa,GAAGd,WAAW,CAACe,OAAlC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Предположим, у вас есть массив данных, который нужно управлять\r\n// В реальности вы можете загрузить это с сервера или импортировать из файла\r\n// Для примера возьмем массив данных (можно заменить на вашу структуру)\r\n\r\n// const initialState = {\r\n//   items: [\r\n//     // Здесь вы можете инициализировать состояние на основе данных\r\n//     // например, так:\r\n//     { id: 1, name: \"DevLens\", isActive: true },\r\n//     { id: 2, name: \"StyleSpy\", isActive: true },\r\n//     { id: 3, name: \"SpeedBoost\", isActive: false },\r\n//     { id: 4, name: \"JSONWizard\", isActive: true },\r\n//     { id: 5, name: \"TabMaster Pro\", isActive: true },\r\n//     { id: 6, name: \"ViewportBuddy\", isActive: false },\r\n//     { id: 7, name: \"Markup Notes\", isActive: true },\r\n//     { id: 8, name: \"GridGuides\", isActive: false },\r\n//     { id: 9, name: \"Palette Picker\", isActive: true },\r\n//     { id: 10, name: \"LinkChecker\", isActive: true },\r\n//     { id: 11, name: \"DOM Snapshot\", isActive: false },\r\n//     { id: 12, name: \"ConsolePlus\", isActive: true },\r\n//     // добавьте остальные элементы из data.json\r\n//   ],\r\n// };\r\n\r\nconst initialState = {\r\n  isActive: \"\",\r\n};\r\n\r\nconst toggleSlice = createSlice({\r\n  name: \"@@toggle\",\r\n  initialState,\r\n  reducers: {\r\n    toggleItem: (state, action) => {\r\n      const itemId = action.payload;\r\n      const item = state.items.find((it) => it.id === itemId);\r\n      if (item) {\r\n        item.isActive = !item.isActive;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleItem } = toggleSlice.actions;\r\nexport const toggleReducer = toggleSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}