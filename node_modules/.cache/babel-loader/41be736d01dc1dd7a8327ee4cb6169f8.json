{"ast":null,"code":"// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import data from \"../../data.json\";\n// // export const loadCountries = createAsyncThunk(\n// //   \"@@countries/load-countries\",\n// //   (_, { extra: { client, api } }) => {\n// //     return client.get(api.ALL_COUNTRIES);\n// //   }\n// // );\n// // export const loadCountries = createAsyncThunk(\n// //   \"@@countries/load-countries\",\n// //   () => {\n// //     // Можно просто вернуть данные\n// //     return { data };\n// //   }\n// // );\n// export const loadCountries = createAsyncThunk(\n//   \"@@countries/load-countries\",\n//   () => {\n//     // data — это уже массив\n//     return data; // возвращаем массив напрямую\n//   }\n// );\n// const initialState = {\n//   status: \"idle\",\n//   error: null,\n//   list: [],\n// };\n// const countrySlice = createSlice({\n//   name: \"@@countries\",\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     // builder\n//     //   .addCase(loadCountries.pending, (state) => {\n//     //     state.status = \"loading\";\n//     //     state.error = null;\n//     //   })\n//     //   .addCase(loadCountries.rejected, (state, action) => {\n//     //     state.status = \"rejected\";\n//     //     state.error = action.payload || action.meta.error;\n//     //   })\n//     //   .addCase(loadCountries.fulfilled, (state, action) => {\n//     //     state.status = \"received\";\n//     //     state.list = action.payload.data;\n//     //   });\n//     // builder.addCase(loadCountries.fulfilled, (state, action) => {\n//     //   console.log(\"Fulfilled payload:\", action.payload);\n//     //   state.status = \"received\";\n//     //   state.list = Array.isArray(action.payload.data)\n//     //     ? action.payload.data\n//     //     : [];\n//     // });\n//     builder.addCase(loadCountries.fulfilled, (state, action) => {\n//       state.status = \"received\";\n//       state.list = action.payload; // теперь это массив\n//     });\n//   },\n// });\n// export const countryReducer = countrySlice.reducer;\n// export const selectCountriesInfo = (state) => ({\n//   status: state.countries.status,\n//   error: state.countries.error,\n//   qty: state.countries.list.length,\n// });\n// export const selectAllCountries = (state) => state.countries.list;\n// export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\n//   return state.countries.list.filter(\n//     (country) =>\n//       country.name.toLowerCase().includes(search.toLowerCase()) &&\n//       country.region.includes(region)\n//   );\n// };\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../data.json\";\nexport const loadCountries = createAsyncThunk(\"@@countries/load-countries\", () => {\n  return {\n    data\n  };\n});\nconst initialState = {\n  status: \"idle\",\n  isOn: false,\n  error: null,\n  list: []\n};\nconst countrySlice = createSlice({\n  name: \"@@countries\",\n  initialState,\n  reducers: {\n    toggle: state => {\n      state.isOn = !state.isOn;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadCountries.fulfilled, (state, action) => {\n      state.status = \"received\";\n      state.list = action.payload.data;\n    });\n  }\n});\nexport const countryReducer = countrySlice.reducer;\nexport const selectCountriesInfo = state => ({\n  status: state.countries.status,\n  error: state.countries.error,\n  qty: state.countries.list.length\n});\nexport const selectAllCountries = state => state.countries.list; // export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\n//   return state.countries.list.filter(\n//     (item) =>\n//       item.name.toLowerCase().includes(search.toLowerCase()) &&\n//       (region ? item.description.includes(region) : true)\n//   );\n// };\n\nexport const selectVisibleCountries = (state, _ref) => {\n  let {\n    search = \"\",\n    region = \"\",\n    filterStatus = \"\"\n  } = _ref;\n  return state.countries.list.filter(item => {\n    const matchesSearch = item.name.toLowerCase().includes(search.toLowerCase());\n    const matchesRegion = region ? item.description.includes(region) : true;\n    let matchesStatus = true;\n\n    if (filterStatus === \"true\") {\n      matchesStatus = item.isActive === true;\n    } else if (filterStatus === \"false\") {\n      matchesStatus = item.isActive === false;\n    } // Если filterStatus пустая строка, фильтр по статусу не применяется\n\n\n    return matchesSearch && matchesRegion && matchesStatus;\n  });\n};","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-info/src/features/countries/countries-slice.js"],"names":["createAsyncThunk","createSlice","data","loadCountries","initialState","status","isOn","error","list","countrySlice","name","reducers","toggle","state","extraReducers","builder","addCase","fulfilled","action","payload","countryReducer","reducer","selectCountriesInfo","countries","qty","length","selectAllCountries","selectVisibleCountries","search","region","filterStatus","filter","item","matchesSearch","toLowerCase","includes","matchesRegion","description","matchesStatus","isActive"],"mappings":"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","sourcesContent":["// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n// import data from \"../../data.json\";\r\n\r\n// // export const loadCountries = createAsyncThunk(\r\n// //   \"@@countries/load-countries\",\r\n// //   (_, { extra: { client, api } }) => {\r\n// //     return client.get(api.ALL_COUNTRIES);\r\n// //   }\r\n// // );\r\n\r\n// // export const loadCountries = createAsyncThunk(\r\n// //   \"@@countries/load-countries\",\r\n// //   () => {\r\n// //     // Можно просто вернуть данные\r\n// //     return { data };\r\n// //   }\r\n// // );\r\n// export const loadCountries = createAsyncThunk(\r\n//   \"@@countries/load-countries\",\r\n//   () => {\r\n//     // data — это уже массив\r\n//     return data; // возвращаем массив напрямую\r\n//   }\r\n// );\r\n\r\n// const initialState = {\r\n//   status: \"idle\",\r\n//   error: null,\r\n//   list: [],\r\n// };\r\n\r\n// const countrySlice = createSlice({\r\n//   name: \"@@countries\",\r\n//   initialState,\r\n//   reducers: {},\r\n//   extraReducers: (builder) => {\r\n//     // builder\r\n//     //   .addCase(loadCountries.pending, (state) => {\r\n//     //     state.status = \"loading\";\r\n//     //     state.error = null;\r\n//     //   })\r\n//     //   .addCase(loadCountries.rejected, (state, action) => {\r\n//     //     state.status = \"rejected\";\r\n//     //     state.error = action.payload || action.meta.error;\r\n//     //   })\r\n//     //   .addCase(loadCountries.fulfilled, (state, action) => {\r\n//     //     state.status = \"received\";\r\n//     //     state.list = action.payload.data;\r\n//     //   });\r\n//     // builder.addCase(loadCountries.fulfilled, (state, action) => {\r\n//     //   console.log(\"Fulfilled payload:\", action.payload);\r\n//     //   state.status = \"received\";\r\n//     //   state.list = Array.isArray(action.payload.data)\r\n//     //     ? action.payload.data\r\n//     //     : [];\r\n//     // });\r\n//     builder.addCase(loadCountries.fulfilled, (state, action) => {\r\n//       state.status = \"received\";\r\n//       state.list = action.payload; // теперь это массив\r\n//     });\r\n//   },\r\n// });\r\n\r\n// export const countryReducer = countrySlice.reducer;\r\n\r\n// export const selectCountriesInfo = (state) => ({\r\n//   status: state.countries.status,\r\n//   error: state.countries.error,\r\n//   qty: state.countries.list.length,\r\n// });\r\n\r\n// export const selectAllCountries = (state) => state.countries.list;\r\n// export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\r\n//   return state.countries.list.filter(\r\n//     (country) =>\r\n//       country.name.toLowerCase().includes(search.toLowerCase()) &&\r\n//       country.region.includes(region)\r\n//   );\r\n// };\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../data.json\";\r\n\r\nexport const loadCountries = createAsyncThunk(\r\n  \"@@countries/load-countries\",\r\n  () => {\r\n    return { data };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isOn: false,\r\n  error: null,\r\n  list: [],\r\n};\r\n\r\nconst countrySlice = createSlice({\r\n  name: \"@@countries\",\r\n  initialState,\r\n  reducers: {\r\n    toggle: (state) => {\r\n      state.isOn = !state.isOn;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loadCountries.fulfilled, (state, action) => {\r\n      state.status = \"received\";\r\n      state.list = action.payload.data;\r\n    });\r\n  },\r\n});\r\n\r\nexport const countryReducer = countrySlice.reducer;\r\n\r\nexport const selectCountriesInfo = (state) => ({\r\n  status: state.countries.status,\r\n  error: state.countries.error,\r\n  qty: state.countries.list.length,\r\n});\r\n\r\nexport const selectAllCountries = (state) => state.countries.list;\r\n// export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\r\n//   return state.countries.list.filter(\r\n//     (item) =>\r\n//       item.name.toLowerCase().includes(search.toLowerCase()) &&\r\n//       (region ? item.description.includes(region) : true)\r\n//   );\r\n// };\r\nexport const selectVisibleCountries = (\r\n  state,\r\n  { search = \"\", region = \"\", filterStatus = \"\" }\r\n) => {\r\n  return state.countries.list.filter((item) => {\r\n    const matchesSearch = item.name\r\n      .toLowerCase()\r\n      .includes(search.toLowerCase());\r\n    const matchesRegion = region ? item.description.includes(region) : true;\r\n    let matchesStatus = true;\r\n\r\n    if (filterStatus === \"true\") {\r\n      matchesStatus = item.isActive === true;\r\n    } else if (filterStatus === \"false\") {\r\n      matchesStatus = item.isActive === false;\r\n    }\r\n    // Если filterStatus пустая строка, фильтр по статусу не применяется\r\n    return matchesSearch && matchesRegion && matchesStatus;\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}