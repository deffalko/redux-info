{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const loadCountryByName = createAsyncThunk(\"@@details/load-country-by-name\", (name, _ref) => {\n  let {\n    extra: {\n      client,\n      api\n    }\n  } = _ref;\n  return client.get(api.searchByCountry(name));\n});\nconst initialState = {\n  selectCurrentCountry: null,\n  neighbors: [],\n  status: \"idle\",\n  error: null\n};\nexport const loadNeighborsByBorder = createAsyncThunk(\"@@details/load-neighbors\", (borders, _ref2) => {\n  let {\n    extra: {\n      client,\n      api\n    }\n  } = _ref2;\n  return client.get(api.filterByCode(borders));\n});\nconst detailsSlice = createSlice({\n  name: \"@@details\",\n  initialState,\n  reducers: {\n    clearDetails: () => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(loadCountryByName.pending, state => {\n      state.status = \"loading\";\n      state.error = null;\n    }).addCase(loadCountryByName.rejected, (state, action) => {\n      state.status = \"rejected\";\n      state.error = action.payload || action.meta.error;\n    }).addCase(loadCountryByName.pending, (state, action) => {\n      state.status = \"idle\";\n      state.currentCountry = action.payload.data[0];\n    }).addCase(loadNeighborsByBorder.fulfilled, (state, action) => {\n      state.neighbors = action.payload.data.map(country => country.name);\n    });\n  }\n});\nexport const {\n  clearDetails\n} = detailsSlice.actions;\nexport const detailsReducer = detailsSlice.reducer;\nexport const selectCurrentCountry = state => state.details.currentCountry;\nexport const selectDetails = state => state.details;\nexport const selectNeighbors = state => state.details.neighbors;","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-countries-refactoring/src/features/details/details-slice.js"],"names":["createAsyncThunk","createSlice","loadCountryByName","name","extra","client","api","get","searchByCountry","initialState","selectCurrentCountry","neighbors","status","error","loadNeighborsByBorder","borders","filterByCode","detailsSlice","reducers","clearDetails","extraReducers","builder","addCase","pending","state","rejected","action","payload","meta","currentCountry","data","fulfilled","map","country","actions","detailsReducer","reducer","details","selectDetails","selectNeighbors"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,iBAAiB,GAAGF,gBAAgB,CAC/C,gCAD+C,EAE/C,CAACG,IAAD,WAAsC;AAAA,MAA/B;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV;AAAT,GAA+B;AACpC,SAAOD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACE,eAAJ,CAAoBL,IAApB,CAAX,CAAP;AACD,CAJ8C,CAA1C;AAOP,MAAMM,YAAY,GAAG;AACnBC,EAAAA,oBAAoB,EAAE,IADH;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,MAAM,EAAE,MAHW;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,OAAO,MAAMC,qBAAqB,GAAGd,gBAAgB,CACnD,0BADmD,EAEnD,CAACe,OAAD,YAAyC;AAAA,MAA/B;AAAEX,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV;AAAT,GAA+B;AACvC,SAAOD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACU,YAAJ,CAAiBD,OAAjB,CAAX,CAAP;AACD,CAJkD,CAA9C;AAOP,MAAME,YAAY,GAAGhB,WAAW,CAAC;AAC/BE,EAAAA,IAAI,EAAE,WADyB;AAE/BM,EAAAA,YAF+B;AAG/BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,MAAMV;AADZ,GAHqB;AAM/BW,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWpB,iBAAiB,CAACqB,OAD7B,EACuCC,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACZ,MAAN,GAAe,SAAf;AACAY,MAAAA,KAAK,CAACX,KAAN,GAAc,IAAd;AACD,KAJH,EAKGS,OALH,CAKWpB,iBAAiB,CAACuB,QAL7B,EAKuC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACtDF,MAAAA,KAAK,CAACZ,MAAN,GAAe,UAAf;AACAY,MAAAA,KAAK,CAACX,KAAN,GAAca,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACE,IAAP,CAAYf,KAA5C;AACD,KARH,EASGS,OATH,CASWpB,iBAAiB,CAACqB,OAT7B,EASsC,CAACC,KAAD,EAAQE,MAAR,KAAmB;AACrDF,MAAAA,KAAK,CAACZ,MAAN,GAAe,MAAf;AACAY,MAAAA,KAAK,CAACK,cAAN,GAAuBH,MAAM,CAACC,OAAP,CAAeG,IAAf,CAAoB,CAApB,CAAvB;AACD,KAZH,EAaGR,OAbH,CAaWR,qBAAqB,CAACiB,SAbjC,EAa4C,CAACP,KAAD,EAAQE,MAAR,KAAmB;AAC3DF,MAAAA,KAAK,CAACb,SAAN,GAAkBe,MAAM,CAACC,OAAP,CAAeG,IAAf,CAAoBE,GAApB,CAAyBC,OAAD,IAAaA,OAAO,CAAC9B,IAA7C,CAAlB;AACD,KAfH;AAgBD;AAvB8B,CAAD,CAAhC;AA0BA,OAAO,MAAM;AAAEgB,EAAAA;AAAF,IAAmBF,YAAY,CAACiB,OAAtC;AACP,OAAO,MAAMC,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AAEP,OAAO,MAAM1B,oBAAoB,GAAIc,KAAD,IAAWA,KAAK,CAACa,OAAN,CAAcR,cAAtD;AACP,OAAO,MAAMS,aAAa,GAAId,KAAD,IAAWA,KAAK,CAACa,OAAvC;AACP,OAAO,MAAME,eAAe,GAAIf,KAAD,IAAWA,KAAK,CAACa,OAAN,CAAc1B,SAAjD","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const loadCountryByName = createAsyncThunk(\r\n  \"@@details/load-country-by-name\",\r\n  (name, { extra: { client, api } }) => {\r\n    return client.get(api.searchByCountry(name));\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  selectCurrentCountry: null,\r\n  neighbors: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\n\r\nexport const loadNeighborsByBorder = createAsyncThunk(\r\n  \"@@details/load-neighbors\",\r\n  (borders, { extra: { client, api } }) => {\r\n    return client.get(api.filterByCode(borders));\r\n  }\r\n);\r\n\r\nconst detailsSlice = createSlice({\r\n  name: \"@@details\",\r\n  initialState,\r\n  reducers: {\r\n    clearDetails: () => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadCountryByName.pending, (state) => {\r\n        state.status = \"loading\";\r\n        state.error = null;\r\n      })\r\n      .addCase(loadCountryByName.rejected, (state, action) => {\r\n        state.status = \"rejected\";\r\n        state.error = action.payload || action.meta.error;\r\n      })\r\n      .addCase(loadCountryByName.pending, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.currentCountry = action.payload.data[0];\r\n      })\r\n      .addCase(loadNeighborsByBorder.fulfilled, (state, action) => {\r\n        state.neighbors = action.payload.data.map((country) => country.name);\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearDetails } = detailsSlice.actions;\r\nexport const detailsReducer = detailsSlice.reducer;\r\n\r\nexport const selectCurrentCountry = (state) => state.details.currentCountry;\r\nexport const selectDetails = (state) => state.details;\r\nexport const selectNeighbors = (state) => state.details.neighbors;\r\n"]},"metadata":{},"sourceType":"module"}