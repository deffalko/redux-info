{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../data.json\"; // export const loadCountries = createAsyncThunk(\n//   \"@@countries/load-countries\",\n//   (_, { extra: { client, api } }) => {\n//     return client.get(api.ALL_COUNTRIES);\n//   }\n// );\n// export const loadCountries = createAsyncThunk(\n//   \"@@countries/load-countries\",\n//   () => {\n//     // Можно просто вернуть данные\n//     return { data };\n//   }\n// );\n\nexport const loadCountries = createAsyncThunk(\"@@countries/load-countries\", () => {\n  // data — это уже массив\n  return data; // возвращаем массив напрямую\n});\nconst initialState = {\n  status: \"idle\",\n  error: null,\n  list: []\n};\nconst countrySlice = createSlice({\n  name: \"@@countries\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    // builder\n    //   .addCase(loadCountries.pending, (state) => {\n    //     state.status = \"loading\";\n    //     state.error = null;\n    //   })\n    //   .addCase(loadCountries.rejected, (state, action) => {\n    //     state.status = \"rejected\";\n    //     state.error = action.payload || action.meta.error;\n    //   })\n    //   .addCase(loadCountries.fulfilled, (state, action) => {\n    //     state.status = \"received\";\n    //     state.list = action.payload.data;\n    //   });\n    // builder.addCase(loadCountries.fulfilled, (state, action) => {\n    //   console.log(\"Fulfilled payload:\", action.payload);\n    //   state.status = \"received\";\n    //   state.list = Array.isArray(action.payload.data)\n    //     ? action.payload.data\n    //     : [];\n    // });\n    builder.addCase(loadCountries.fulfilled, (state, action) => {\n      state.status = \"received\";\n      state.list = action.payload; // теперь это массив\n    });\n  }\n}); // export const countryReducer = countrySlice.reducer;\n// export const selectCountriesInfo = (state) => ({\n//   status: state.countries.status,\n//   error: state.countries.error,\n//   qty: state.countries.list.length,\n// });\n// export const selectAllCountries = (state) => state.countries.list;\n// export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\n//   return state.countries.list.filter(\n//     (country) =>\n//       country.name.toLowerCase().includes(search.toLowerCase()) &&\n//       country.region.includes(region)\n//   );\n// };","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-info/src/features/countries/countries-slice.js"],"names":["createAsyncThunk","createSlice","data","loadCountries","initialState","status","error","list","countrySlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,IAAP,MAAiB,iBAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGH,gBAAgB,CAC3C,4BAD2C,EAE3C,MAAM;AACJ;AACA,SAAOE,IAAP,CAFI,CAES;AACd,CAL0C,CAAtC;AAQP,MAAME,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;AAMA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,aADyB;AAE/BL,EAAAA,YAF+B;AAG/BM,EAAAA,QAAQ,EAAE,EAHqB;AAI/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBV,aAAa,CAACW,SAA9B,EAAyC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1DD,MAAAA,KAAK,CAACV,MAAN,GAAe,UAAf;AACAU,MAAAA,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACC,OAApB,CAF0D,CAE7B;AAC9B,KAHD;AAID;AA7B8B,CAAD,CAAhC,C,CAgCA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../data.json\";\r\n\r\n// export const loadCountries = createAsyncThunk(\r\n//   \"@@countries/load-countries\",\r\n//   (_, { extra: { client, api } }) => {\r\n//     return client.get(api.ALL_COUNTRIES);\r\n//   }\r\n// );\r\n\r\n// export const loadCountries = createAsyncThunk(\r\n//   \"@@countries/load-countries\",\r\n//   () => {\r\n//     // Можно просто вернуть данные\r\n//     return { data };\r\n//   }\r\n// );\r\nexport const loadCountries = createAsyncThunk(\r\n  \"@@countries/load-countries\",\r\n  () => {\r\n    // data — это уже массив\r\n    return data; // возвращаем массив напрямую\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  error: null,\r\n  list: [],\r\n};\r\n\r\nconst countrySlice = createSlice({\r\n  name: \"@@countries\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // builder\r\n    //   .addCase(loadCountries.pending, (state) => {\r\n    //     state.status = \"loading\";\r\n    //     state.error = null;\r\n    //   })\r\n    //   .addCase(loadCountries.rejected, (state, action) => {\r\n    //     state.status = \"rejected\";\r\n    //     state.error = action.payload || action.meta.error;\r\n    //   })\r\n    //   .addCase(loadCountries.fulfilled, (state, action) => {\r\n    //     state.status = \"received\";\r\n    //     state.list = action.payload.data;\r\n    //   });\r\n    // builder.addCase(loadCountries.fulfilled, (state, action) => {\r\n    //   console.log(\"Fulfilled payload:\", action.payload);\r\n    //   state.status = \"received\";\r\n    //   state.list = Array.isArray(action.payload.data)\r\n    //     ? action.payload.data\r\n    //     : [];\r\n    // });\r\n    builder.addCase(loadCountries.fulfilled, (state, action) => {\r\n      state.status = \"received\";\r\n      state.list = action.payload; // теперь это массив\r\n    });\r\n  },\r\n});\r\n\r\n// export const countryReducer = countrySlice.reducer;\r\n\r\n// export const selectCountriesInfo = (state) => ({\r\n//   status: state.countries.status,\r\n//   error: state.countries.error,\r\n//   qty: state.countries.list.length,\r\n// });\r\n\r\n// export const selectAllCountries = (state) => state.countries.list;\r\n// export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\r\n//   return state.countries.list.filter(\r\n//     (country) =>\r\n//       country.name.toLowerCase().includes(search.toLowerCase()) &&\r\n//       country.region.includes(region)\r\n//   );\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}