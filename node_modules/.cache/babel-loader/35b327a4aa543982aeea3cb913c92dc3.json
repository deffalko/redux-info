{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  search: \"\",\n  region: \"\",\n  type: \"all\",\n  filterStatus: \"\",\n  // или по умолчанию \"all\" или \"\" для фильтрации по статусу\n  remove: \"\"\n};\nconst controlSlice = createSlice({\n  name: \"@@controls\",\n  initialState,\n  reducers: {\n    setSearch: (state, action) => {\n      state.search = action.payload;\n    },\n    setRegion: (state, action) => {\n      state.region = action.payload;\n    },\n    setType: (state, action) => {\n      state.type = action.payload;\n    },\n    setRemove: (state, action) => {\n      // state.remove = action.payload;\n      const idToRemove = action.payload;\n      state.item.filter(c => c.id !== idToRemove);\n    },\n    setFilterStatus: (state, action) => {\n      state.filterStatus = action.payload;\n    },\n    clearControls: () => initialState\n  }\n});\nexport const {\n  setRegion,\n  setSearch,\n  setType,\n  setRemove,\n  setFilterStatus,\n  clearControls\n} = controlSlice.actions;\nexport const controlsReducer = controlSlice.reducer;\nexport const selectSearch = state => state.controls.search;\nexport const selectType = state => state.controls.type;\nexport const selectRegion = state => state.controls.region;\nexport const selectFilterStatus = state => state.controls.filterStatus;\nexport const selectControls = state => state.controls;\nexport const selectRemove = state => state.controls.remove;","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-info/src/features/controls/controls-slice.js"],"names":["createSlice","initialState","search","region","type","filterStatus","remove","controlSlice","name","reducers","setSearch","state","action","payload","setRegion","setType","setRemove","idToRemove","item","filter","c","id","setFilterStatus","clearControls","actions","controlsReducer","reducer","selectSearch","controls","selectType","selectRegion","selectFilterStatus","selectControls","selectRemove"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,IAAI,EAAE,KAHa;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAID;AAClBC,EAAAA,MAAM,EAAE;AALW,CAArB;AAQA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,YADyB;AAE/BP,EAAAA,YAF+B;AAG/BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACT,MAAN,GAAeU,MAAM,CAACC,OAAtB;AACD,KAHO;AAIRC,IAAAA,SAAS,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACR,MAAN,GAAeS,MAAM,CAACC,OAAtB;AACD,KANO;AAORE,IAAAA,OAAO,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACD,KATO;AAURG,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5B;AACA,YAAMK,UAAU,GAAGL,MAAM,CAACC,OAA1B;AACAF,MAAAA,KAAK,CAACO,IAAN,CAAWC,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,UAAlC;AACD,KAdO;AAeRK,IAAAA,eAAe,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAACC,OAA5B;AACD,KAjBO;AAkBRU,IAAAA,aAAa,EAAE,MAAMtB;AAlBb;AAHqB,CAAD,CAAhC;AAyBA,OAAO,MAAM;AACXa,EAAAA,SADW;AAEXJ,EAAAA,SAFW;AAGXK,EAAAA,OAHW;AAIXC,EAAAA,SAJW;AAKXM,EAAAA,eALW;AAMXC,EAAAA;AANW,IAOThB,YAAY,CAACiB,OAPV;AAQP,OAAO,MAAMC,eAAe,GAAGlB,YAAY,CAACmB,OAArC;AAEP,OAAO,MAAMC,YAAY,GAAIhB,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAe1B,MAA/C;AACP,OAAO,MAAM2B,UAAU,GAAIlB,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAexB,IAA7C;AACP,OAAO,MAAM0B,YAAY,GAAInB,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAezB,MAA/C;AACP,OAAO,MAAM4B,kBAAkB,GAAIpB,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAevB,YAArD;AACP,OAAO,MAAM2B,cAAc,GAAIrB,KAAD,IAAWA,KAAK,CAACiB,QAAxC;AACP,OAAO,MAAMK,YAAY,GAAItB,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAetB,MAA/C","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  search: \"\",\r\n  region: \"\",\r\n  type: \"all\",\r\n  filterStatus: \"\", // или по умолчанию \"all\" или \"\" для фильтрации по статусу\r\n  remove: \"\",\r\n};\r\n\r\nconst controlSlice = createSlice({\r\n  name: \"@@controls\",\r\n  initialState,\r\n  reducers: {\r\n    setSearch: (state, action) => {\r\n      state.search = action.payload;\r\n    },\r\n    setRegion: (state, action) => {\r\n      state.region = action.payload;\r\n    },\r\n    setType: (state, action) => {\r\n      state.type = action.payload;\r\n    },\r\n    setRemove: (state, action) => {\r\n      // state.remove = action.payload;\r\n      const idToRemove = action.payload;\r\n      state.item.filter((c) => c.id !== idToRemove);\r\n    },\r\n    setFilterStatus: (state, action) => {\r\n      state.filterStatus = action.payload;\r\n    },\r\n    clearControls: () => initialState,\r\n  },\r\n});\r\n\r\nexport const {\r\n  setRegion,\r\n  setSearch,\r\n  setType,\r\n  setRemove,\r\n  setFilterStatus,\r\n  clearControls,\r\n} = controlSlice.actions;\r\nexport const controlsReducer = controlSlice.reducer;\r\n\r\nexport const selectSearch = (state) => state.controls.search;\r\nexport const selectType = (state) => state.controls.type;\r\nexport const selectRegion = (state) => state.controls.region;\r\nexport const selectFilterStatus = (state) => state.controls.filterStatus;\r\nexport const selectControls = (state) => state.controls;\r\nexport const selectRemove = (state) => state.controls.remove;\r\n"]},"metadata":{},"sourceType":"module"}