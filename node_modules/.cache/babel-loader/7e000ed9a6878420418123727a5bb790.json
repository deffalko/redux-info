{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"./data.json\"; // путь к вашему файлу с данными\n// Предположим, у вас есть массив данных, который нужно управлять\n// В реальности вы можете загрузить это с сервера или импортировать из файла\n// Для примера возьмем массив данных (можно заменить на вашу структуру)\n// const initialState = {\n//   items: [\n//     // Здесь вы можете инициализировать состояние на основе данных\n//     // например, так:\n//     { id: 1, name: \"DevLens\", isActive: true },\n//     { id: 2, name: \"StyleSpy\", isActive: true },\n//     { id: 3, name: \"SpeedBoost\", isActive: false },\n//     { id: 4, name: \"JSONWizard\", isActive: true },\n//     { id: 5, name: \"TabMaster Pro\", isActive: true },\n//     { id: 6, name: \"ViewportBuddy\", isActive: false },\n//     { id: 7, name: \"Markup Notes\", isActive: true },\n//     { id: 8, name: \"GridGuides\", isActive: false },\n//     { id: 9, name: \"Palette Picker\", isActive: true },\n//     { id: 10, name: \"LinkChecker\", isActive: true },\n//     { id: 11, name: \"DOM Snapshot\", isActive: false },\n//     { id: 12, name: \"ConsolePlus\", isActive: true },\n//     // добавьте остальные элементы из data.json\n//   ],\n// };\n\nconst initialState = {\n  activeIds: [] // хранить список активных id\n\n};\nconst toggleSlice = createSlice({\n  name: \"@@toggle\",\n  initialState,\n  reducers: {\n    toggleItem: (state, action) => {\n      const id = action.payload;\n\n      if (state.activeIds.includes(id)) {\n        state.activeIds = state.activeIds.filter(itemId => itemId !== id);\n      } else {\n        state.activeIds.push(id);\n      }\n    },\n    setActiveIds: (state, action) => {\n      state.activeIds = action.payload; // если нужно сразу устанавливать список\n    }\n  }\n});\nexport const selectActiveIds = state => state.toggle.activeIds;\nexport const toggleReducer = toggleSlice.reducer;","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/redux-info/src/features/toggle/toggle-slice.js"],"names":["createSlice","data","initialState","activeIds","toggleSlice","name","reducers","toggleItem","state","action","id","payload","includes","filter","itemId","push","setActiveIds","selectActiveIds","toggle","toggleReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAAgC;AAEhC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ,CACJ;;AADI,CAArB;AAIA,MAAMC,WAAW,GAAGJ,WAAW,CAAC;AAC9BK,EAAAA,IAAI,EAAE,UADwB;AAE9BH,EAAAA,YAF8B;AAG9BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMC,EAAE,GAAGD,MAAM,CAACE,OAAlB;;AACA,UAAIH,KAAK,CAACL,SAAN,CAAgBS,QAAhB,CAAyBF,EAAzB,CAAJ,EAAkC;AAChCF,QAAAA,KAAK,CAACL,SAAN,GAAkBK,KAAK,CAACL,SAAN,CAAgBU,MAAhB,CAAwBC,MAAD,IAAYA,MAAM,KAAKJ,EAA9C,CAAlB;AACD,OAFD,MAEO;AACLF,QAAAA,KAAK,CAACL,SAAN,CAAgBY,IAAhB,CAAqBL,EAArB;AACD;AACF,KARO;AASRM,IAAAA,YAAY,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACE,OAAzB,CAD+B,CACG;AACnC;AAXO;AAHoB,CAAD,CAA/B;AAkBA,OAAO,MAAMM,eAAe,GAAIT,KAAD,IAAWA,KAAK,CAACU,MAAN,CAAaf,SAAhD;AACP,OAAO,MAAMgB,aAAa,GAAGf,WAAW,CAACgB,OAAlC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"./data.json\"; // путь к вашему файлу с данными\r\n\r\n// Предположим, у вас есть массив данных, который нужно управлять\r\n// В реальности вы можете загрузить это с сервера или импортировать из файла\r\n// Для примера возьмем массив данных (можно заменить на вашу структуру)\r\n\r\n// const initialState = {\r\n//   items: [\r\n//     // Здесь вы можете инициализировать состояние на основе данных\r\n//     // например, так:\r\n//     { id: 1, name: \"DevLens\", isActive: true },\r\n//     { id: 2, name: \"StyleSpy\", isActive: true },\r\n//     { id: 3, name: \"SpeedBoost\", isActive: false },\r\n//     { id: 4, name: \"JSONWizard\", isActive: true },\r\n//     { id: 5, name: \"TabMaster Pro\", isActive: true },\r\n//     { id: 6, name: \"ViewportBuddy\", isActive: false },\r\n//     { id: 7, name: \"Markup Notes\", isActive: true },\r\n//     { id: 8, name: \"GridGuides\", isActive: false },\r\n//     { id: 9, name: \"Palette Picker\", isActive: true },\r\n//     { id: 10, name: \"LinkChecker\", isActive: true },\r\n//     { id: 11, name: \"DOM Snapshot\", isActive: false },\r\n//     { id: 12, name: \"ConsolePlus\", isActive: true },\r\n//     // добавьте остальные элементы из data.json\r\n//   ],\r\n// };\r\n\r\nconst initialState = {\r\n  activeIds: [], // хранить список активных id\r\n};\r\n\r\nconst toggleSlice = createSlice({\r\n  name: \"@@toggle\",\r\n  initialState,\r\n  reducers: {\r\n    toggleItem: (state, action) => {\r\n      const id = action.payload;\r\n      if (state.activeIds.includes(id)) {\r\n        state.activeIds = state.activeIds.filter((itemId) => itemId !== id);\r\n      } else {\r\n        state.activeIds.push(id);\r\n      }\r\n    },\r\n    setActiveIds: (state, action) => {\r\n      state.activeIds = action.payload; // если нужно сразу устанавливать список\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectActiveIds = (state) => state.toggle.activeIds;\r\nexport const toggleReducer = toggleSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}